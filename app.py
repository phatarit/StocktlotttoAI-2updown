import streamlit as st
import pandas as pd
from collections import Counter
import numpy as np
from sklearn.neural_network import MLPClassifier

st.set_page_config(page_title="StockLottoAI 5 ‡∏´‡∏•‡∏±‡∏Å", page_icon="üéØ", layout="centered")
st.title("üéØ StockLottoAI - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ß‡∏¢‡∏´‡∏∏‡πâ‡∏ô 5 ‡∏´‡∏•‡∏±‡∏Å + AI")

# ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
st.markdown(
    """
    ‡∏ß‡∏≤‡∏á‡∏ú‡∏•‡∏´‡∏ß‡∏¢‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö `‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô ‡∏ß‡∏£‡∏£‡∏Ñ ‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á` ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏á‡∏ß‡∏î (‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡∏∞ 1 ‡∏ä‡∏∏‡∏î) ‡πÄ‡∏ä‡πà‡∏ô
    `123 45`
    `567 89`
    `098 76`
    """
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ INPUT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
raw = st.text_area(
    "üì• ‡∏ß‡∏≤‡∏á‡∏ú‡∏•‡∏´‡∏ß‡∏¢ 5 ‡∏´‡∏•‡∏±‡∏Å (‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô ‡∏ß‡∏£‡∏£‡∏Ñ ‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á)",
    height=220,
    placeholder="123 45\n567 89\n098 76 ..."
)
# ‡∏£‡∏ß‡∏°‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á 5 ‡∏´‡∏•‡∏±‡∏Å
draws = []
for line in raw.splitlines():
    parts = line.strip().split()
    if len(parts) == 2 and parts[0].isdigit() and parts[1].isdigit():
        if len(parts[0]) == 3 and len(parts[1]) == 2:
            draws.append(parts[0] + parts[1])
n_draw = len(draws)
st.write(f"üìä ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• **{n_draw}** ‡∏á‡∏ß‡∏î (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 3+2 ‡∏´‡∏•‡∏±‡∏Å)")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà (5 ‡∏á‡∏ß‡∏î) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def analyze_repeat_digits(nums, window=5):
    last = nums[-window:]
    all_digits = ''.join(last)
    c = Counter(all_digits)
    repeats = [d for d, cnt in c.items() if cnt > 1]
    return repeats, c

# ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡πâ‡∏≤‡∏°‡∏á‡∏ß‡∏î (Cross-Draw)
def predict_cross_patterns(nums, window=5, topk=2):
    repeats, freq = analyze_repeat_digits(nums, window)
    hot_digits = sorted(repeats, key=lambda d: freq[d], reverse=True)[:topk]
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ö‡∏ô & ‡∏•‡πà‡∏≤‡∏á 4 ‡∏ä‡∏∏‡∏î
    two_digit = []
    for a in hot_digits:
        for b in hot_digits:
            if len(two_digit) >= 4:
                break
            two_digit.append(a + b)
        if len(two_digit) >= 4:
            break
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô 1 ‡∏ä‡∏∏‡∏î (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ö‡∏¥‡πâ‡∏•-‡∏´‡∏≤‡∏° ‡∏ä‡∏∏‡∏î‡πÅ‡∏£‡∏Å)
    if len(hot_digits) >= 2:
        a, b = hot_digits[0], hot_digits[1]
        three_digit = a + a + b
    else:
        three_digit = hot_digits[0] * 3 if hot_digits else ''
    return two_digit, three_digit

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Logic ‡∏õ‡∏Å‡∏ï‡∏¥ (5 ‡∏á‡∏ß‡∏î) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if n_draw >= 5:
    st.subheader("üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ (Cross-Draw 5 ‡∏á‡∏ß‡∏î)")
    two_sets, three_set = predict_cross_patterns(draws, window=5)
    repeats, freq = analyze_repeat_digits(draws, window=5)
    st.write("**‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏≠‡∏≠‡∏Å‡∏ã‡πâ‡∏≥ (Digits Repeated):**", ', '.join(sorted(repeats)))
    st.write("**‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏á‡∏ß‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ - ‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ö‡∏ô & ‡∏•‡πà‡∏≤‡∏á 4 ‡∏ä‡∏∏‡∏î:**", ', '.join(two_sets))
    st.write("**‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏á‡∏ß‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ - ‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô 1 ‡∏ä‡∏∏‡∏î:**", three_set)
else:
    st.info("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 ‡∏á‡∏ß‡∏î (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 3+2) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö Cross-Draw")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ML Part (Neural Network) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def predict_next_digit_ml(nums, window=4):
    nums = [list(map(int, list(x))) for x in nums]
    X, y = [], []
    for i in range(len(nums) - window):
        features = np.array(nums[i:i+window]).flatten()
        target = nums[i+window][-1]
        X.append(features)
        y.append(target)
    if len(X) < 10:
        return None
    X, y = np.array(X), np.array(y)
    model = MLPClassifier(hidden_layer_sizes=(32, 16), max_iter=2000, random_state=42)
    model.fit(X, y)
    last_features = np.array(nums[-window:]).flatten().reshape(1, -1)
    return model.predict(last_features)[0]

if n_draw >= 25:
    st.subheader("ü§ñ AI (ML) ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏á‡∏ß‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
    pred_digit = predict_next_digit_ml(draws, window=4)
    if pred_digit is not None:
        st.write(f"**AI ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:** <span style='font-size:2em;color:green'>{pred_digit}</span>", unsafe_allow_html=True)
    else:
        st.warning("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ML ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 25 ‡∏á‡∏ß‡∏î)")
else:
    st.info("‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 25 ‡∏á‡∏ß‡∏î (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 3+2) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI (ML) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ")

st.caption("¬© 2025 StockLottoAI - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ß‡∏¢‡∏´‡∏∏‡πâ‡∏ô 5 ‡∏´‡∏•‡∏±‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏° AI/ML")
