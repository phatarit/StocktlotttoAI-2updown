import streamlit as st
import pandas as pd
from collections import Counter
import numpy as np
from sklearn.neural_network import MLPClassifier

st.set_page_config(page_title="StockLottoAI 5 ‡∏´‡∏•‡∏±‡∏Å", page_icon="üéØ", layout="centered")
st.title("üéØ StockLottoAI - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ß‡∏¢‡∏´‡∏∏‡πâ‡∏ô 5 ‡∏´‡∏•‡∏±‡∏Å + AI")

# ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
st.markdown(
    """
    ‡∏ß‡∏≤‡∏á‡∏ú‡∏•‡∏´‡∏ß‡∏¢‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö `‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô ‡∏ß‡∏£‡∏£‡∏Ñ ‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á` ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡∏∞ 1 ‡∏ä‡∏∏‡∏î ‡πÄ‡∏ä‡πà‡∏ô
    `123 45`
    `567 89`
    `098 76`
    """
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ INPUT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
raw = st.text_area(
    "üì• ‡∏ß‡∏≤‡∏á‡∏ú‡∏•‡∏´‡∏ß‡∏¢ 5 ‡∏´‡∏•‡∏±‡∏Å (3+2)", height=200,
    placeholder="123 45\n567 89\n098 76 ..."
)
draws = []
for line in raw.splitlines():
    parts = line.strip().split()
    if len(parts)==2 and parts[0].isdigit() and parts[1].isdigit():
        if len(parts[0])==3 and len(parts[1])==2:
            draws.append(parts[0]+parts[1])
n_draw = len(draws)
st.write(f"üìä ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• **{n_draw}** ‡∏á‡∏ß‡∏î")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πà‡∏ô 2 ‡∏ï‡∏±‡∏ß ‡∏à‡∏≤‡∏Å 10 ‡∏á‡∏ß‡∏î ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def analyze_hot_digits(nums, window=10):
    last = nums[-window:]
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏Å 0-9 ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è
    count_draws = {str(d): sum(1 for draw in last if str(d) in draw) for d in range(10)}
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
    hot_digits = sorted(count_draws, key=lambda d: count_draws[d], reverse=True)[:2]
    return hot_digits, count_draws

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß (4 ‡∏ä‡∏∏‡∏î) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def predict_two_digit_sets(nums, window=10):
    hot_digits, freq = analyze_hot_digits(nums, window)
    a, b = hot_digits[0], hot_digits[1] if len(hot_digits)>1 else (hot_digits[0], hot_digits[0])
    # cross ‡πÅ‡∏•‡∏∞ double
    two_sets = [a+b, b+a, a*2, b*2]
    return two_sets, hot_digits

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß (2 ‡∏ä‡∏∏‡∏î) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def predict_three_digit_sets(hot_digits):
    if len(hot_digits) >= 2:
        a, b = hot_digits[0], hot_digits[1]
        return [a+a+b, b+b+a]
    elif hot_digits:
        return [hot_digits[0]*3, hot_digits[0]*3]
    else:
        return ["", ""]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Logic ‡∏õ‡∏Å‡∏ï‡∏¥ (10 ‡∏á‡∏ß‡∏î) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if n_draw >= 10:
    st.subheader("üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ (Hot-Digit 10 ‡∏á‡∏ß‡∏î)")
    two_sets, hot_digits = predict_two_digit_sets(draws, window=10)
    three_sets = predict_three_digit_sets(hot_digits)
    st.write("**‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πà‡∏ô 2 ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å 10 ‡∏á‡∏ß‡∏î:**", ', '.join(hot_digits))
    st.write("**‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏á‡∏ß‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ö‡∏ô & ‡∏•‡πà‡∏≤‡∏á 4 ‡∏ä‡∏∏‡∏î):**", ', '.join(two_sets))
    st.write("**‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏á‡∏ß‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô 2 ‡∏ä‡∏∏‡∏î):**", ', '.join(three_sets))
else:
    st.info("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 ‡∏á‡∏ß‡∏î (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 3+2) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Hot-Digit")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ML Part (Neural Network) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def predict_next_digit_ml(nums, window=4):
    nums = [list(map(int, list(x))) for x in nums]
    X, y = [], []
    for i in range(len(nums)-window):
        X.append(np.array(nums[i:i+window]).flatten())
        y.append(nums[i+window][-1])
    if len(X) < 10:
        return None
    model = MLPClassifier(hidden_layer_sizes=(32, 16), max_iter=2000, random_state=42)
    model.fit(np.array(X), np.array(y))
    last_feat = np.array(nums[-window:]).flatten().reshape(1, -1)
    return model.predict(last_feat)[0]

if n_draw >= 25:
    st.subheader("ü§ñ AI (ML) ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏á‡∏ß‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
    pred_digit = predict_next_digit_ml(draws, window=4)
    if pred_digit is not None:
        st.write(f"**AI ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:** <span style='font-size:2em;color:green'>{pred_digit}</span>", unsafe_allow_html=True)
    else:
        st.warning("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ML ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 25 ‡∏á‡∏ß‡∏î)")
else:
    st.info("‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 25 ‡∏á‡∏ß‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI (ML) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ")

st.caption("¬© 2025 StockLottoAI - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ß‡∏¢‡∏´‡∏∏‡πâ‡∏ô 5 ‡∏´‡∏•‡∏±‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏° AI/ML")
